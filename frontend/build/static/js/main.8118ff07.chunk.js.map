{"version":3,"sources":["constant.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","assets/twitter-logo.svg","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","warn","length","character","index","src","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","runAttackAction","attackBoss","attackTxn","setTimeout","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","checkNetwork","chainId","alert","connectWalletAction","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","process","appId","serverUrl","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8118ff07.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = '0x8464cAd78eDd45c39aCE35484136b783742e2312';\n\nconst transformCharacterData = (characterData) => {\n    return {\n        name: characterData.name,\n        imageURI: characterData.imageURI,\n        hp: characterData.hp.toNumber(),\n        maxHp: characterData.maxHp.toNumber(),\n        attackDamage: characterData.attackDamage.toNumber(),\n    };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constant';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n\n    useEffect(() => {\n        const { ethereum } = window;\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n\n            /*\n             * This is the big difference. Set our gameContract in state.\n             */\n            setGameContract(gameContract);\n        } else {\n            console.log('Ethereum object not found');\n        }\n    }, []);\n\n    useEffect(() => {\n        const getCharacters = async () => {\n            try {\n                console.log('Getting contract characters to mint');\n\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\n                console.log('charactersTxn:', charactersTxn);\n\n                const characters = charactersTxn.map((characterData) =>\n                    transformCharacterData(characterData)\n                );\n\n                setCharacters(characters);\n            } catch (error) {\n                console.error('Something went wrong fetching characters:', error);\n            }\n        };\n\n        /*\n         * Add a callback method that will fire when this event is received\n         */\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\n            console.log(\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n            );\n\n            /*\n             * Once our character NFT is minted we can fetch the metadata from our contract\n             * and set it in state to move onto the Arena\n             */\n            if (gameContract) {\n                const characterNFT = await gameContract.checkIfUserHasNFT();\n                console.log('CharacterNFT: ', characterNFT);\n                setCharacterNFT(transformCharacterData(characterNFT));\n            }\n        };\n\n        if (gameContract) {\n            getCharacters();\n\n            /*\n             * Setup NFT Minted Listener\n             */\n            gameContract.on('CharacterNFTMinted', onCharacterMint);\n        }\n\n        return () => {\n            /*\n             * When your component unmounts, let;s make sure to clean up this listener\n             */\n            if (gameContract) {\n                gameContract.off('CharacterNFTMinted', onCharacterMint);\n            }\n        };\n    }, [gameContract]);\n\n    const mintCharacterNFTAction = async (characterId) => {\n        try {\n            if (gameContract) {\n                setMintingCharacter(true);\n                console.log('Minting character in progress...');\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\n                await mintTxn.wait();\n                console.log('mintTxn:', mintTxn);\n                setMintingCharacter(false);\n            }\n        } catch (error) {\n            console.warn('MintCharacterAction Error:', error);\n            setMintingCharacter(false);\n        }\n    };\n\n    const renderCharacters = () =>\n        characters.map((character, index) => (\n            <div className=\"character-item\" key={character.name}>\n                <div className=\"name-container\">\n                    <p>{character.name}</p>\n                </div>\n                <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} alt={character.name} />\n                <button\n                    type=\"button\"\n                    className=\"character-mint-button\"\n                    onClick={() => mintCharacterNFTAction(index)}\n                >{`Mint ${character.name}`}</button>\n            </div>\n        ));\n\n    return (\n        <div className=\"select-character-container\">\n            <h2>Mint Your Hero. Choose wisely.</h2>\n            {/* Only show this when there are characters in state */}\n            {characters.length > 0 && (\n                <div className=\"character-grid\">{renderCharacters()}</div>\n            )}\n            {mintingCharacter && (\n                <div className=\"loading\">\n                    <div className=\"indicator\">\n                        <LoadingIndicator />\n                        <p>Minting In Progress...</p>\n                    </div>\n                    <img\n                        src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n                        alt=\"Minting loading indicator\"\n                    />\n                </div>\n            )}\n\n        </div>\n    );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constant';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\nimport './Arena.css';\n\n/*\n * We pass in our characterNFT metadata so we can show a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n    // State\n    const [gameContract, setGameContract] = useState(null);\n    const [boss, setBoss] = useState(null);\n    const [attackState, setAttackState] = useState('');\n    const [showToast, setShowToast] = useState(false);\n\n    useEffect(() => {\n        const { ethereum } = window;\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n            const gameContract = new ethers.Contract(\n                CONTRACT_ADDRESS,\n                myEpicGame.abi,\n                signer\n            );\n\n            setGameContract(gameContract);\n        } else {\n            console.log('Ethereum object not found');\n        }\n    }, []);\n\n    useEffect(() => {\n        /*\n         * Setup async function that will get the boss from our contract and sets in state\n         */\n        const fetchBoss = async () => {\n            const bossTxn = await gameContract.getBigBoss();\n            console.log('Boss:', bossTxn);\n            setBoss(transformCharacterData(bossTxn));\n        };\n\n        if (gameContract) {\n            /*\n             * gameContract is ready to go! Let's fetch our boss\n             */\n            fetchBoss();\n        }\n    }, [gameContract]);\n\n    const runAttackAction = async () => {\n        try {\n            if (gameContract) {\n                setAttackState('attacking');\n                console.log('Attacking boss...');\n                const attackTxn = await gameContract.attackBoss();\n                await attackTxn.wait();\n                console.log('attackTxn:', attackTxn);\n                setAttackState('hit');\n\n                setShowToast(true);\n                setTimeout(() => {\n                    setShowToast(false);\n                }, 5000);\n            }\n        } catch (error) {\n            console.error('Error attacking boss:', error);\n            setAttackState('');\n        }\n    };\n\n    useEffect(() => {\n        const fetchBoss = async () => {\n            const bossTxn = await gameContract.getBigBoss();\n            console.log('Boss:', bossTxn);\n            setBoss(transformCharacterData(bossTxn));\n        };\n\n        /*\n        * Setup logic when this event is fired off\n        */\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n            const bossHp = newBossHp.toNumber();\n            const playerHp = newPlayerHp.toNumber();\n\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n            /*\n            * Update both player and boss Hp\n            */\n            setBoss((prevState) => {\n                return { ...prevState, hp: bossHp };\n            });\n\n            setCharacterNFT((prevState) => {\n                return { ...prevState, hp: playerHp };\n            });\n        };\n\n        if (gameContract) {\n            fetchBoss();\n            gameContract.on('AttackComplete', onAttackComplete);\n        }\n\n        /*\n        * Make sure to clean up this event when this component is removed\n        */\n        return () => {\n            if (gameContract) {\n                gameContract.off('AttackComplete', onAttackComplete);\n            }\n        }\n    }, [gameContract]);\n\n    return (\n        <div className=\"arena-container\">\n            {/* Add your toast HTML right here */}\n            {boss && characterNFT && (\n                <div id=\"toast\" className={showToast ? 'show' : ''}>\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n                </div>\n            )}\n\n            {/* Boss */}\n            {boss && (\n                <div className=\"boss-container\">\n                    <div className={`boss-content  ${attackState}`}>\n                        <h2>🔥 {boss.name} 🔥</h2>\n                        <div className=\"image-content\">\n                            <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n                            <div className=\"health-bar\">\n                                <progress value={boss.hp} max={boss.maxHp} />\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"attack-container\">\n                        <button className=\"cta-button\" onClick={runAttackAction}>\n                            {`💥 Attack ${boss.name}`}\n                        </button>\n                    </div>\n                    {attackState === 'attacking' && (\n                        <div className=\"loading-indicator\">\n                            <LoadingIndicator />\n                            <p>Attacking ⚔️</p>\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {/* Character NFT */}\n            {characterNFT && (\n                <div className=\"players-container\">\n                    <div className=\"player-container\">\n                        <h2>Your Character</h2>\n                        <div className=\"player\">\n                            <div className=\"image-content\">\n                                <h2>{characterNFT.name}</h2>\n                                <img\n                                    src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                                    alt={`Character ${characterNFT.name}`}\n                                />\n                                <div className=\"health-bar\">\n                                    <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                                </div>\n                            </div>\n                            <div className=\"stats\">\n                                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                            </div>\n                        </div>\n                    </div>\n                    {/* <div className=\"active-players\">\n          <h2>Active Players</h2>\n          <div className=\"players-list\">{renderActivePlayersList()}</div>\n        </div> */}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Arena;","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constant';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from 'ethers';\n\n// Constants\nconst TWITTER_HANDLE = 'NirbanChakrab10';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /*\n   * Since this method will take some time, make sure to declare it as async\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        /*\n         * Check if we're authorized to access the user's wallet\n         */\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        /*\n         * User can have multiple authorized accounts, we grab the first one if its there!\n         */\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n    setIsLoading(false);\n  };\n\n  const checkNetwork = async () => {\n    let chainId = await window.ethereum.request({ method: 'eth_chainId' });\n    const fujiChainId = \"43113\";\n    try {\n      if (chainId !== fujiChainId) {\n        alert(\"Please connect to Avalanche Fuji Testnet!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/e9183e6b6772d481c4411b7dbc966c4f/658467523ecfdfc4-87/s540x810/486b1e05e5080508947ef8dd3e919f237526570c.gifv\"\n            alt=\"Lightning Mcqueen Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    }\n    else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    }\n    else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    checkNetwork();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n      setIsLoading(false);\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Car Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to destroy the Boss!</p>\n          {renderContent()};\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { MoralisProvider } from \"react-moralis\";\nimport 'dotenv/config';\n\nconst { appId, serverUrl } = process.env\n\nReactDOM.render(\n  <React.StrictMode>\n    <MoralisProvider appId={appId} serverUrl={serverUrl}>\n      <App />\n    </MoralisProvider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}